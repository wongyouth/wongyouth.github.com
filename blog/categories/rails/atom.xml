<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 鱼哥的技术博客]]></title>
  <link href="http://wongyouth.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://wongyouth.com/"/>
  <updated>2014-03-28T01:56:27+08:00</updated>
  <id>http://wongyouth.com/</id>
  <author>
    <name><![CDATA[Wongyouth / 自由鱼]]></name>
    <email><![CDATA[wongyouth@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[speed spider for web crawling]]></title>
    <link href="http://wongyouth.com/blog/2013/06/01/speed-spider-for-web-crawling/"/>
    <updated>2013-06-01T22:30:00+08:00</updated>
    <id>http://wongyouth.com/blog/2013/06/01/speed-spider-for-web-crawling</id>
    <content type="html"><![CDATA[<h2>background</h2>

<p>Some days ago I wanted to learn some css stuff from a site, I changed some css style to see what it turns to.
After 10 minutes after I got tired when I have to change the source again and again in the browser.
So I googled to find what kind of tools can be used to download files from a site, but I can't find anything satisfied.
So after searched github I found I can do it myself with little work.</p>

<p>Here comes the <a href="https://github.com/wongyouth/speed_spider">SpeedSpider</a>, it's A simple and speedy web spider for site pages downloading.</p>

<p>UPDATE:</p>

<p>It turns out <code>wget</code> can do all the jobs I wanted except it doest not use threads. So wget way may be slower than SpeedSpider.
You can download bootstrap page with code below.</p>

<pre><code>wget -m -p -E -k -np http://twitter.github.io/bootstrap
</code></pre>

<!--more-->


<p>SpeedSpider was made with below in mind</p>

<ul>
<li>download files from a site with a start url</li>
<li>option for downloading part site obeying a base url, any page not starts with <code>base_url</code> will not be downloaded</li>
<li>assets files like css, js, image and font should be downloaded besides html files, and not obey <code>base_url</code> rule</li>
<li>image file include in css file should be download</li>
<li>url from site other than the start url should not be downloaded</li>
<li>download files should be save with the same structure with the origin site</li>
</ul>


<h2>Installation</h2>

<p>install it with rubygem:</p>

<pre><code>gem install 'speed_spider'
</code></pre>

<h3>Usage</h3>

<pre><code>Usage: spider [options] start_url

options:
    -S, --slient                     slient output
    -D, --dir String                 directory for download files to save to. "download" by default
    -b, --base_url String            any url not starts with base_url will not be saved
    -t, --threads Integer            threads to run for fetching pages, 4 by default
    -u, --user_agent String          words for request header USER_AGENT
    -d, --delay Integer              delay between requests
    -o, --obey_robots_text           obey robots exclustion protocol
    -l, --depth_limit                limit the depth of the crawl
    -r, --redirect_limit Integer     number of times HTTP redirects will be followed
    -a, --accept_cookies             accept cookies from the server and send them back?
    -s, --skip_query_strings         skip any link with a query string? e.g. http://foo.com/?u=user
    -H, --proxy_host String          proxy server hostname
    -P, --proxy_port Integer         proxy server port number
    -T, --read_timeout Integer       HTTP read timeout in seconds
    -V, --version                    Show version
</code></pre>

<h2>Examples</h2>

<pre><code>spider http://twitter.github.io/bootstrap/
</code></pre>

<p>It will download all files within the same domain as twitter.github.io, and save to download/twitter.github.io/.</p>

<pre><code>spider -b http://ruby-doc.org/core-2.0/ http://ruby-doc.org/core-2.0/
</code></pre>

<p>It will only download urls start with http://ruby-doc.org/core-2.0/, notice assets files like image, css, js, font will not obey base_url rule.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails开发用 vimfiles 配置]]></title>
    <link href="http://wongyouth.com/blog/2012/07/05/rails-development-oriented-vimfiles/"/>
    <updated>2012-07-05T09:41:00+08:00</updated>
    <id>http://wongyouth.com/blog/2012/07/05/rails-development-oriented-vimfiles</id>
    <content type="html"><![CDATA[<p>看到很多朋友在烦编辑器的事，就像自己刚开始的时候一样。 我还是选择了vim, 就是喜欢他可以配置到自己喜欢的样子， 不知道你喜欢不喜欢我的配置，但是如果你着急上手，试试我的。</p>

<!-- more -->


<p>虽然只在ubuntu测试过，但是应该在别的系统下也可以用</p>

<h2>特点</h2>

<ul>
<li>单条命令完成安装，免除配置痛苦</li>
<li>vim插件不包含在repo里，支持一个命令更新所有vimplugins，免除更新插件之苦</li>
</ul>


<h2>包含插件</h2>

<ul>
<li>vundle, vim插件管理器， <code>:BundleInstall!</code> 更新所有插件</li>
<li>rails 必须的</li>
<li>NERDTree 树形文件管理器 <code>F7</code> / <code>F6</code> 当前文件文件夹</li>
<li>NERDComment 注释用<code>\cc</code>  / <code>\c&lt;space&gt;</code></li>
<li>delimitMate 自动补全右括号</li>
<li>zencoding HTML垒码利器 <code>&lt;c-y&gt;,</code></li>
<li>tabular 代码美化。 按 <code>=</code> 等对齐 <code>\a=</code>， 按 <code>=&gt;</code> 对齐 <code>\a&gt;</code></li>
<li><del>taglist 标签列表</del> tagbar 标签列表 <code>F8</code></li>
<li>ctrlp 文件查找 <code>&lt;c-p&gt;</code></li>
<li>bufExplorer 缓冲列表 <code>&lt;c-k&gt;</code></li>
<li>preview markdown文件编译结果查看 <code>\P</code></li>
<li>fugitive 超强大GIT代码仓库查询工具

<ul>
<li>查状态 <code>:Gstatus</code></li>
<li>查异同 <code>:Gdiff</code></li>
<li>搜pattern <code>:Ggrep</code>, 替代ack</li>
<li>查log <code>:Glog</code></li>
<li>打开Github上该文件 <code>:Gbrowse</code></li>
<li>说不完...</li>
</ul>
</li>
<li>snippets</li>
<li>语法支持

<ul>
<li>less, haml</li>
<li>markdown</li>
<li>sass, scss</li>
<li>coffee-script</li>
<li>css 文件中颜色color, background-color 自动显示为背景色 （需gvim）</li>
</ul>
</li>
<li>配色方案

<ul>
<li>solarized</li>
<li>vim-github-colorscheme</li>
<li>backboard</li>
</ul>
</li>
</ul>


<h2>vimrc DIY</h2>

<ul>
<li>当前行,列高亮</li>
<li><code>F3</code> 搜索， <code>alt-F3</code> 替换 文件中所有当前光标下文字</li>
<li><code>F4</code> 插入模式时 切换粘帖模式， 普通模式时 切换 行号</li>
</ul>


<p>你觉得还少了什么？</p>

<p>最后vim英文帮助看着吃力的话你可以下载VIM的中文说明，那就完美了
<a href="http://vimcdoc.sourceforge.net/">vim中文帮助</a></p>

<h2>Screenshots</h2>

<p><img src="http://pic.yupoo.com/sinaweibo1332356097/C5k2LdP9/medish.jpg" alt="vim-gui" /></p>

<p>repo 在这里 <a href="https://github.com/wongyouth/vimfiles">https://github.com/wongyouth/vimfiles</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在rails中使用mongoid]]></title>
    <link href="http://wongyouth.com/blog/2012/06/30/use-mongoid-with-rails/"/>
    <updated>2012-06-30T12:54:00+08:00</updated>
    <id>http://wongyouth.com/blog/2012/06/30/use-mongoid-with-rails</id>
    <content type="html"><![CDATA[<p>在我看来noSQL解决方案有一个最大的优点就是可以方便的scale out, Oracle等大型数据库也可以支持Grid，支持集群但是就是配置起来的繁琐而已，可以写一本厚厚的书啦。而今天要使用的mongodb只是简单的一个配置文件就能搞定，简单易用容易让人理解，只就是生产力的极大提升啊。</p>

<!-- more -->


<p>Mongodb可使用的ruby adapter 常用的有Mongoid, Mongo Ruby Driver, Mongo mapper, 在这里不比较两者的异同，我们简单的用现在人气高的一个mongoid。人气值可以在看<a href="https://www.ruby-toolbox.com/categories/mongodb_clients">这里</a></p>

<h2>Step 1: Install Mongodb 2.0</h2>

<p>目前Ubuntu官方库里的mongodb还没有升级到2.0版，我们用mongodb官方提供<a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-debian-or-ubuntu-linux/">步骤</a>来安装。</p>

<p>```sh</p>

<pre><code># 添加mongodb公司10gen的pgp键
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10

# 增加源到apt
sudo sh -c "echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' &gt; /etc/apt/sources.list.d/10gen.list"

# 更新源
sudo apt-get update

# 安装mongodb
sudo apt-get install mongodb-10gen

# 启动mongodb
sudo service mongodb start

# test mongo client
mongo

# db.test.save( {a: 1} )
# db.test.find()
</code></pre>

<p>```</p>

<h2>Step 2: Setup Gemfile to install mongoid</h2>

<p>在Gemfile中添加mongoid</p>

<pre><code>gem 'mongoid', '~&gt; 3.0.0.rc'
</code></pre>

<p>执行</p>

<pre><code>bundle install
</code></pre>

<p>这样就可以使用了。在[railscasts][]中有mongoid的使用视频，我就不接着举例了。
虽然现在mongoid升级到了3.0rc，有些东西会有变化，但是大的变化不会太大。</p>

<p>mongoid的确是好东西，但是rails社区之前的插件基本都是为mysql特质的，所以很多好插件在mongoid下还不能用，
这个还需要社区在进一步的发展才能达到，重复造轮子代价太大，我们做迁移之前还是要考虑好这个现实问题的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu环境下在Rails项目中使用postgresql时的初始配置]]></title>
    <link href="http://wongyouth.com/blog/2012/06/25/use-postgresql-with-rails/"/>
    <updated>2012-06-25T14:28:00+08:00</updated>
    <id>http://wongyouth.com/blog/2012/06/25/use-postgresql-with-rails</id>
    <content type="html"><![CDATA[<p>在我们的rails服务器配置中经常用的是 MySQL，
今天使用开源社区的另一款数据库软件 postgresql 来做一个实验。</p>

<p>测试环境： ubuntu 12.04</p>

<!-- more -->


<p>安装与配置postgresql数据库。</p>

<pre><code># 安装 postgresql 和开发库（pg.gem使用）
sudo apt-get install postgresql libpq-dev

# 修改配置文件使TCP/IP来的链接可用

# /etc/postgresql/9.1/main/postgresql.conf 文件中去掉以下行开头的 `#'
# listen_addresses = 'localhost'

# 重启 postgresql
sudo /etc/init.d/postgresql restart
</code></pre>

<p>生成rails里面使用的postgrelsql的帐号密码，这里我们用MySQL的帐号root。</p>

<pre><code># 创建root帐号
# -d 可以创建数据库
# -R 不可以创建角色
# -S 不是超级用户
sudo -u postgres createuser -d -R -S root
</code></pre>

<p>postgres 是 postgresql 的超级帐号，使用他就可以做任何事了，包括找回密码哦，因为默认配置是不需要输入密码的。</p>

<pre><code># 修改root帐号密码
echo "alter role root password 'root';" | sudo -u postgres psql

# 测试帐号登录
psql -U root -h localhost template1
</code></pre>

<p>template1 是安装 postgresql 时自动生成的一个模板，这里为什么要指定 template1 是因为不指定一个操作对象时会报错。</p>

<p>配置rails程序，使其使用postgresql</p>

<pre><code>gem pg
</code></pre>

<p>config/database.yml</p>

<pre><code>adapter: postgresql
host: localhost
database: xxx_development
username: root
password: root
encoding: utf8
pool: 5
</code></pre>

<p>生成数据库启动rails</p>

<pre><code>rake db:create
rails server
</code></pre>

<p>后面的操作就与MySQL时是一样的啦。</p>
]]></content>
  </entry>
  
</feed>
